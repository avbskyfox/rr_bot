import re
from asyncio.exceptions import TimeoutError

from aiogram import types, Bot
from asgiref.sync import sync_to_async, async_to_sync
from django.conf import settings
from django.db import models
from django.utils import timezone
from loguru import logger

from cabinet.models import User, Service, Curency, Bill, Order, OrderException, BackendException, Excerpt
from rr_backend.backend import Backend
from rr_backend.rosreestr import TemporaryUnavalible, NotFound
from .tasks import update_bill_status, send_to_adm_group

bot = Bot(token=settings.TELEGRAM_API_TOKEN)


@async_to_sync
async def send_message(*args, **kwargs):
    return await bot.send_message(*args, parse_mode='HTML', **kwargs)


class Dialog(models.Model):
    class Meta:
        verbose_name = '–î–∏–∞–ª–æ–≥'

    telegram_id = models.OneToOneField(User, to_field='telegram_id',
                                       on_delete=models.CASCADE,
                                       verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                       db_index=True,
                                       primary_key=True)
    step = models.IntegerField(verbose_name='–®–∞–≥', default=0)
    data = models.JSONField(verbose_name='–î–∞–Ω–Ω—ã–µ', default=dict)
    service = models.ForeignKey(Service, on_delete=models.CASCADE, verbose_name='–£—Å–ª—É–≥–∞', null=True)
    curency = models.ForeignKey(Curency, on_delete=models.CASCADE, verbose_name='–í–∞–ª—é—Ç–∞', null=True)
    number = models.CharField(max_length=30, verbose_name='–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä', blank=True)
    address = models.CharField(max_length=255, verbose_name='–°—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–∞', blank=True)
    dadata = models.JSONField(max_length=4096, verbose_name='–î–∞–Ω–Ω—ã–µ –¥–∞–¥–∞—Ç–∞', null=True)

    def serialize(self):
        purse = self.telegram_id.purse_set.get(curency=self.curency)
        return {
            'step': self.step,
            'service': self.service.serialize(),
            'curency': self.curency,
            'number': self.number,
            'address': self.address,
            'purse_ammount': purse.ammount,
            'check_ammount': self.service.check_ammount(self.telegram_id, self.curency)
        }

    def flush(self):
        self.step = 0
        self.data = {}
        self.save()


# def conditions_accepted_permission(cls):
#    for name, method in cls.__dict__.iteritems():
#         if hasattr(method, "use_class"):
#             # do something with the method and class
#
#    return cls


def conditions_accepted_permission(method):
    def wraper(*args, **kwargs):
        def is_done_char(expression: bool):
            return '‚úÖ' if expression else '‚ùå'
        user = args[0].user
        is_condition = user.conditions_accepted
        is_email = True if user.email != '' else False
        is_phone = True if user.phone_number != '' else False
        try:
            assert is_condition
            assert is_email
            assert is_phone
        except AssertionError:
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='authorization')
            keyboard.add(button)
            text = f'''–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:
{is_done_char(is_email)} –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
{is_done_char(is_phone)} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
{is_done_char(is_condition)} –ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
            '''
            return text, keyboard
        else:
            return method(*args, **kwargs)
    return wraper


class SearchHistory(models.Model):
    class Meta:
        verbose_name = '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤'

    user = models.OneToOneField(User, to_field='telegram_id',
                                on_delete=models.CASCADE,
                                verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                db_index=True,
                                primary_key=True)
    data = models.JSONField(default=list, max_length=8096, verbose_name='–î–∞–Ω–Ω—ã–µ')

    def save_to_history(self, dadata):
        self.data.insert(0, dadata)
        if len(self.data) > 5:
            self.data.pop()
        self.save()


class BalanceDialog(models.Model):
    class Meta:
        verbose_name = '–î–∏–∞–ª–æ–≥'

    user = models.OneToOneField(User, to_field='telegram_id',
                                on_delete=models.CASCADE,
                                verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                db_index=True,
                                primary_key=True)
    data = models.JSONField(default=dict, max_length=8096)
    resolver = models.TextField(max_length=32, null=True)

    def __str__(self):
        return f'{self.user.username}_dialog'

    chat_id = None

    def send_message(self, text, reply_markup=None):
        send_message(chat_id=self.chat_id, text=text, reply_markup=reply_markup)

    def flush(self):
        # main_dialog, _ = Dialog.objects.get_or_create(pk=self.user)
        # main_dialog.flush()
        logger.debug(f'dialog {str(self)} flushed')
        self.data = {}
        self.resolver = None
        self.save()

    def set_resolver(self, resolver_name: str):
        self.resolver = resolver_name
        self.save()

    @classmethod
    def callback_resolv(cls, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        obj, _ = cls.objects.get_or_create(pk=user_id)
        obj.chat_id = callback.message.chat.id
        data = callback.data
        # refill dialog entry point
        if data == 'join':
            return obj.press_join(data)
        if data == 'refill':
            # obj.flush()
            return obj.press_refill(data)
        # change email entry point
        if data == 'change_email':
            obj.flush()
            return obj.press_change_email(data)
        if data == 'change_phone':
            obj.flush()
            return obj.press_change_phone(data)
        if data == 'orders':
            obj.flush()
            return obj.press_orders(data)
        if data == 'authorization':
            # obj.flush()
            return obj.press_authorization(data)
        if data == 'accept_conditions':
            # obj.flush()
            return obj.press_accept_conditions(data)

        resolver = obj.get_resolver()
        return resolver(data)

    @classmethod
    def message_resolv(cls, message: types.Message):
        user_id = message.from_user.id
        text = message.text
        obj, _ = cls.objects.get_or_create(pk=user_id)
        obj.chat_id = message.chat.id

        # help message entry point
        if text == 'üõé –ü–æ–º–æ—â—å':
            return obj.input_help(text)
        # purse entry point
        if text == 'üí∞ –ö–æ—à–µ–ª–µ–∫':
            obj.flush()
            return obj.press_purse(text)
        # my account entry point
        if text == '‚≠ê –ê–∫–∫–∞—É–Ω—Ç':
            obj.flush()
            return obj.press_my_account(text)
        if text == 'üìù –ó–∞–∫–∞–∑—ã':
            obj.flush()
            return obj.press_orders(text)
        if text == 'üìù –ò—Å—Ç–æ—Ä–∏—è':
            obj.flush()
            return obj.press_history(text)
        if re.match(r'.* .* .*', text):
            obj.flush()
            return obj.input_adress_string(text)

        if re.match(r"^(\d\d):(\d\d):*", text):
            obj.flush()
            return obj.input_cadastr_number(text)

        resolver = obj.get_resolver()
        return resolver(text)

    @classmethod
    def contact_resolv(cls, message: types.Message):
        user_id = message.from_user.id
        obj, _ = cls.objects.get_or_create(pk=user_id)
        obj.chat_id = message.chat.id
        return obj.input_phone(message)

    @classmethod
    @sync_to_async(thread_sensitive=False)
    def async_callback_resolv(cls, callback: types.CallbackQuery):
        return cls.callback_resolv(callback)

    @classmethod
    @sync_to_async(thread_sensitive=False)
    def async_message_resolv(cls, message: types.Message):
        return cls.message_resolv(message)

    @classmethod
    @sync_to_async(thread_sensitive=False)
    def async_contact_resolv(cls, message: types.CallbackQuery):
        return cls.contact_resolv(message)

    def get_resolver(self):
        return getattr(self, str(self.resolver), self.default_resolver)

    def default_resolver(self, data):
        return f'–£–ø—Å...\n–í—ã —Ç—ã–∫–Ω—É–ª–∏ –∫–∞–¥–∞ —Ç–æ –Ω–µ —Ç—É–¥–∞ :)\n–ò–ª–∏ —Å–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ :)\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ.', None

    def press_join(self, data):
        if data == 'join':
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            help_button = types.KeyboardButton('üõé –ü–æ–º–æ—â—å')
            orders_button = types.KeyboardButton('üìù –ò—Å—Ç–æ—Ä–∏—è')
            account_button = types.KeyboardButton('‚≠ê –ê–∫–∫–∞—É–Ω—Ç')
            purse_button = types.KeyboardButton('üí∞ –ö–æ—à–µ–ª–µ–∫')
            keyboard.add(help_button, account_button)
            keyboard.add(orders_button, purse_button)
            # keyboard.add(purse_button)
            text = '''–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ¬´–¢–µ—Ä—Ä–∞–≥–µ–Ω—Ç¬ª
–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:
+ –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (<b>–í—ã–ø–∏—Å–∫–∞-–æ—Ç—á–µ—Ç</b>)

'''
            return [(text, keyboard), self.input_help('')]

    def press_authorization(self, data):
        if data != 'authorization':
            return self.default_resolver(data)
        is_condition = self.user.conditions_accepted
        is_email = True if self.user.email != '' else False
        is_phone = True if self.user.phone_number != '' else False
        if not is_email:
            self.data['return_to_authorization'] = True
            self.data['return_data'] = data
            self.set_resolver('input_email')
            return '–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à email. –ù–∞ –Ω–µ–≥–æ –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', None
        if not is_phone:
            self.data['return_to_authorization'] = True
            self.data['return_data'] = data
            self.set_resolver('input_email')
            return self.press_change_phone('data')
        if not is_condition:
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è', callback_data='accept_conditions')
            keyboard.add(button)
            message1 = '''–û–∑–Ω–∞–∫–æ–º—Ç–µ—Å—å —Å –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π:
<a href="http://terragent.ru/media/docs/offerta.pdf"> –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ—Ñ–µ—Ä—Ç–∞ </a>'''
            message2 = '''–ê —Ç–∞–∫–∂–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:
<a href="http://terragent.ru/media/docs/policy.pdf"> –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ </a>
    '''
            self.set_resolver('press_accept_conditions')
            return [(message1, None), (message2, None), ('–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', keyboard)]

    def press_accept_conditions(self, data):
        if data == 'accept_conditions':
            self.user.conditions_accepted = True
            self.user.save()
            self.flush()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # help_button = types.KeyboardButton('–ü–æ–º–æ—â—å')
            # orders_button = types.KeyboardButton('–ó–∞–∫–∞–∑—ã')
            # account_button = types.KeyboardButton('–ê–∫–∫–∞—É–Ω—Ç')
            # purse_button = types.KeyboardButton('–ö–æ—à–µ–ª–µ–∫')
            # keyboard.add(help_button, account_button)
            # keyboard.add(orders_button, purse_button)
            return [('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ä–≤–∏—Å–æ–º', None), self.input_help('')]
        else:
            return self.default_resolver(data)

    def press_history(self, text: str):
        histroy, _ = SearchHistory.objects.get_or_create(user=self.user)
        message_list = [('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:', None)]
        data = histroy.data
        data.reverse()
        for i, item in enumerate(data):
            keyboard = types.InlineKeyboardMarkup()
            text = item['addr_variants']['value']
            button = types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data=f'history_{i}')
            keyboard.add(button)
            message_list.append((text, keyboard))
        if len(message_list) > 1:
            self.set_resolver('press_repeat')
            return message_list
        else:
            self.flush()
            return '–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞–ª–∏...', None

    def press_repeat(self, data: str):
        if 'history' not in data:
            return self.default_resolver(data)
        history_id = int(data.split('_')[1])
        history = SearchHistory.objects.get(user=self.user)
        data = history.data[history_id]
        self.data = data
        self.save()
        results = self.data['search_results']
        self.set_resolver('press_on_object_variant')
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n'
        buttons = []
        for i, result in enumerate(results):
            text += f'\n<b>–û–±—ä–µ–∫—Ç {i + 1}:</b>'
            buttons.append(types.InlineKeyboardButton(text=f'–û–±—ä–µ–∫—Ç {i + 1}', callback_data=f'object_{i}'))
            text += f"\n{result['–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä']} - {result['–ê–¥—Ä–µ—Å']}"
            text += f"\n–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞: {result['–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞']}\n"
        keyboard = types.InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(button)
        return text, keyboard

    def press_refill(self, data: str, message=None):
        # self.flush()
        bill_set = Bill.objects.filter(user=self.user, is_payed=False)

        for bill in bill_set:
            bill.update_payment()

        filtred_bill_set = bill_set.filter(is_payed=False)

        if len(filtred_bill_set) > 0:
            bill = filtred_bill_set.first()
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂', callback_data=f'cancel: {bill.id}')
            url = types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Tinkoff', url=bill.payment.payment_url)
            keyboard.add(url)
            keyboard.add(button)
            self.set_resolver('press_cancel_payment')
            return f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç:\n {bill.amount / 100} {settings.DEFAULT_CURENCY}', keyboard

        if self.user.email == '':
            self.set_resolver('input_email')
            self.data = {'return_to': 'input_amount', 'return_message': '–í—ã–±–∏—Ä–µ—Ç–µ —Å—É–º–º—É, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:'}
            self.save()
            return f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ <b>—É–∫–∞–∑–∞—Ç—å email</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤:', None

        self.set_resolver('input_amount')
        keyboard = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text=f'100 {settings.DEFAULT_CURENCY}', callback_data=100)
        button2 = types.InlineKeyboardButton(text=f'250 {settings.DEFAULT_CURENCY}', callback_data=250)
        button3 = types.InlineKeyboardButton(text=f'500 {settings.DEFAULT_CURENCY}', callback_data=500)
        button4 = types.InlineKeyboardButton(text=f'1000 {settings.DEFAULT_CURENCY}', callback_data=1000)
        keyboard.row(button1, button2)
        keyboard.row(button3, button4)
        return '–í—ã–±–∏—Ä–µ—Ç–µ —Å—É–º–º—É, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:', keyboard

    def press_cancel_payment(self, data: str):
        bill_id = int(data.split(' ')[1])
        bill = Bill.objects.get(pk=bill_id)
        bill.payment.cancel()
        bill.delete()
        self.flush()
        return f'–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω!', None

    def input_amount(self, text: str):
        if not text.isnumeric():
            return '–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —á–∏—Å–ª–æ!', None
        self.data['amount'] = text
        self.resolver = 'press_amount_yes_no'
        self.save()
        keyboard = types.InlineKeyboardMarkup()
        yes_button = types.InlineKeyboardButton(text='–¥–∞', callback_data='y')
        no_button = types.InlineKeyboardButton(text='–Ω–µ—Ç', callback_data='n')
        keyboard.add(yes_button, no_button)
        return f'–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω–∞ {text} {settings.DEFAULT_CURENCY}?', keyboard

    def press_amount_yes_no(self, data: str):
        if data == 'n':
            self.flush()
            return None, None
        elif data == 'y':
            self.data['yes_no'] = data
            amount = int(self.data['amount']) * 100
            curency = Curency.objects.get(name=settings.DEFAULT_CURENCY)
            bill = Bill.objects.create(user=self.user,
                                       curency=curency,
                                       amount=amount,
                                       price=amount * curency.course)
            bill.create_payment()
            update_bill_status.delay(bill.id, self.user.telegram_id)
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Tinkoff', url=bill.payment.payment_url)
            keyboard.add(button)
            if self.data.get('return_to', None) == 'press_on_service':
                self.set_resolver('press_on_service')
                keyboard2 = types.InlineKeyboardMarkup()
                button2 = types.InlineKeyboardButton(text='–ü—Ä–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
                                                     callback_data=self.data['return_data'])
                keyboard2.add(button2)
                return [('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç–Ω–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É', keyboard),
                        ('–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', keyboard2)]
            return f'–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—á–µ—Ç–Ω–∞ –æ–ø–ª–∞—Ç—É', keyboard

    def input_help(self, text: str):
        # self.flush()
        return '''–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –∏–ª–∏ <b>–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä</b> –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏

–ù–∞–ø—Ä–∏–º–µ—Ä:
<b>–ü–µ—Ä–º—å –†–µ–≤–æ–ª—é—Ü–∏–∏ 12 34</b> –∏–ª–∏ <b>59:01:234567:89</b>
''', None

    @conditions_accepted_permission
    def press_purse(self, tet: str):
        # self.flush()
        purse, _ = self.user.purse_set.get_or_create(curency__name=settings.DEFAULT_CURENCY)
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='refill')
        keyboard.add(button)
        return f'–ë–∞–ª–∞–Ω—Å: {purse.ammount} {settings.DEFAULT_CURENCY}', keyboard

    def press_my_account(self, text: str):
        # self.flush()
        keyboard = types.InlineKeyboardMarkup()
        top_up_balance = types.InlineKeyboardButton(text='üí∞ –ü–æ–ø–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='refill')
        orders = types.InlineKeyboardButton(text='üìù –ó–∞–∫–∞–∑—ã', callback_data='orders')
        # referal = types.InlineKeyboardButton(text='–†–µ—Ñ–µ—Ä–∞–ª–∫–∞', callback_data='referal')
        change_email = types.InlineKeyboardButton(text='üíå –ò–∑–º–µ–Ω–∏—Ç—å email', callback_data='change_email')
        change_phone = types.InlineKeyboardButton(text='‚òéÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='change_phone')
        keyboard.add(top_up_balance)
        keyboard.add(orders)
        # keyboard.add(referal)
        keyboard.add(change_email)
        keyboard.add(change_phone)
        # curency = Curency.objects.get(name__exact=settings.DEFAULT_CURENCY)
        text = f'''‚≠êÔ∏è <b>–í–∞—à ID</b>: {self.user.telegram_id}
üíå <b>Email</b>: {self.user.email}
‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {self.user.phone_number}
üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: {self.user.purse_set.get(curency__name=settings.DEFAULT_CURENCY).ammount} {settings.DEFAULT_CURENCY}
'''
        # –í—ã —Å –Ω–∞–º–∏ —Å: {self.user.date_joined.strftime('%d.%m.%Y')}

        return text, keyboard

    # @conditions_accepted_permission
    def press_change_email(self, data):
        # self.flush()
        self.set_resolver('input_email')
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_email')
        keyboard.add(button)
        return '–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å email? –¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:', keyboard

    def input_email(self, text: str):
        if text == 'cancel_email':
            self.flush()
            return f'–ù—É –ª–∞–¥–Ω–æ, –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ—Ç: {self.user.email}', None
        regexp = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', re.IGNORECASE)
        if regexp.match(text):
            self.user.email = text.lower()
            self.user.save()
            if self.data.get('return_to', None):
                # if self.data['return_to'] == ''
                self.set_resolver(self.data['return_to'])
                keyboard = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(text=f'100 {settings.DEFAULT_CURENCY}', callback_data=100)
                button2 = types.InlineKeyboardButton(text=f'250 {settings.DEFAULT_CURENCY}', callback_data=250)
                button3 = types.InlineKeyboardButton(text=f'500 {settings.DEFAULT_CURENCY}', callback_data=500)
                button4 = types.InlineKeyboardButton(text=f'1000 {settings.DEFAULT_CURENCY}', callback_data=1000)
                keyboard.row(button1, button2)
                keyboard.row(button3, button4)
                return f'email –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.user.email} \n{self.data["return_message"]}', keyboard
            elif self.data.get('return_to_authorization', None):
                return self.press_authorization(self.data['return_data'])
            else:
                self.flush()
            return f'email –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.user.email}', None
        else:
            return '–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email', None

    def press_change_phone(self, data: str):
        self.set_resolver('input_phone')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text='‚úÖ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', request_contact=True)
        button2 = types.KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')
        keyboard.add(button1)
        keyboard.add(button2)
        return '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –í–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', keyboard

    def input_phone(self, message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        help_button = types.KeyboardButton('üõé –ü–æ–º–æ—â—å')
        orders_button = types.KeyboardButton('üìù –ò—Å—Ç–æ—Ä–∏—è')
        account_button = types.KeyboardButton('‚≠ê –ê–∫–∫–∞—É–Ω—Ç')
        purse_button = types.KeyboardButton('üí∞ –ö–æ—à–µ–ª–µ–∫')
        keyboard.add(help_button, account_button)
        keyboard.add(orders_button, purse_button)
        if not isinstance(message, types.Message):
            text = '''–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            '''
            return text, keyboard
        self.user.phone_number = message.contact.phone_number
        self.user.save()
        if self.data.get('return_to_authorization', None):
            return [('–°–ø–∞—Å–∏–±–æ', keyboard), self.press_authorization(self.data['return_data'])]
        return '–°–ø–∞—Å–∏–±–æ', keyboard

    def press_orders(self, data: str):
        # self.flush()
        orders = self.user.order_set.all()
        processed_orders = []
        finished_orders = []
        for order in orders:
            if order.is_finished and (order.date_created - timezone.now()) < \
                    timezone.timedelta(days=settings.RRTELEBOT_ORDERS_AGE):
                finished_orders.append(order)
            else:
                processed_orders.append(order)
        self.set_resolver('press_new_old')
        keyboard = types.InlineKeyboardMarkup()
        new_button = types.InlineKeyboardButton(text=f'–í –æ–±—Ä–∞–±–æ—Ç–∫–µ ({len(processed_orders)})',
                                                callback_data='new_orders')
        old_button = types.InlineKeyboardButton(text=f'–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ({len(finished_orders)})', callback_data='old_orders')
        keyboard.add(new_button)
        keyboard.add(old_button)
        return '–í—ã–±–∏—Ä–µ—Ç–µ:', keyboard

    def press_new_old(self, data: str):
        orders = []
        if data == 'new_orders':
            orders = [order for order in self.user.order_set.all() if not order.is_finished]
        elif data == 'old_orders':
            orders = [order for order in self.user.order_set.all() if order.is_finished]
        result = []
        for order in orders:
            text = f'{order.number} –æ—Ç {order.date_created.strftime("%d.%m.%Y")}'
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü—Ä—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data=f'order: {order.id}')
            keyboard.add(button)
            result.append((text, keyboard))
        self.set_resolver('press_view_order')
        return result

    def press_view_order(self, data: str):
        if data.find('order: ') == 0:
            order_id = int(data.split(' ')[1])
            order = Order.objects.get(pk=order_id)
            text = f'–ó–∞–∫–∞–∑ ‚Ññ {order.number} –æ—Ç {order.date_created.strftime("%d.%m.%Y")}\n –¥–ª—è –∞–¥—Ä–µ—Å–∞ {order.address}\n'
            message_list = [(text, None)]
            for exerpt in order.excerpt_set.all():
                if not exerpt.is_delivered:
                    exerpt.check_status()
                if exerpt.is_delivered:
                    status = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É'
                    keyboard = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É...', callback_data=f'resend_{exerpt.id}')
                    keyboard.add(button)
                    message_list.append((f'{exerpt.type.name}: {status}\n', keyboard))
                else:
                    status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
                    message_list.append((f'{exerpt.type.name}: {status}\n', None))
            self.set_resolver('press_resend_docs')
            return message_list
        return None, None

    def press_resend_docs(self, data: str):
        if data.find('resend_') == 0:
            excerpt_id = int(data.split('_')[1])
            excerpt = Excerpt.objects.get(pk=excerpt_id)
            if excerpt.is_delivered:
                excerpt.send_docs()
        self.flush()
        return '–û—Ç–ø—Ä–∞–≤–∏–ª', None

    def input_adress_string(self, data: str):
        addr_variants = Backend.find_adress(data, self.chat_id)
        if len(addr_variants) == 0:
            return '–¢–∞–∫–æ–π –∞–¥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', None
        else:
            self.data = {'addr_variants': addr_variants[0]}
            self.set_resolver('press_next_on_adsress')
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='next')
            keyboard.row(button)
            text = f'''–ê–¥—Ä–µ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫:
<b>{self.data['addr_variants']['value']}</b>
            '''
            return text, keyboard

    def input_cadastr_number(self, data: str):
        try:
            result = Backend.object_by_number(data, self.chat_id)
        except NotFound:
            return '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞. ' \
                   '–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞', None
        self.data['search_results'] = [result]
        return self.press_on_object_variant('object_0')

    def press_next_on_adsress(self, data: str):
        if self.user.check_free_search():
            if data != 'next':
                return self.default_resolver(data)
            try:
                results = Backend.objects_by_address(self.data['addr_variants'], self.chat_id)
            except (TimeoutError, TemporaryUnavalible):
                return 'C–µ—Ä–≤–∏—Å—ã –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', None
            except:
                send_to_adm_group.delay(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {self.data["addr_variants"]["value"]}')
                logger.exception(f'Exeption on search address: {self.data["addr_variants"]["value"]}')
                return '–ù–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!!! –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å —ç—Ç–∏–º', None

            if len(results) == 0:
                send_to_adm_group.delay(f'–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.data["addr_variants"]["value"]}')
                return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ', None

            self.data['search_results'] = results
            history, _ = SearchHistory.objects.get_or_create(user=self.user)
            history.save_to_history(self.data)
            self.set_resolver('press_on_object_variant')
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n'
            buttons = []
            for i, result in enumerate(results):
                text += f'\n<b>–û–±—ä–µ–∫—Ç {i + 1}:</b>'
                buttons.append(types.InlineKeyboardButton(text=f'–û–±—ä–µ–∫—Ç {i + 1}', callback_data=f'object_{i}'))
                text += f"\n{result['–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä']} - {result['–ê–¥—Ä–µ—Å']}"
                text += f"\n–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞: {result['–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞']}\n"

            keyboard = types.InlineKeyboardMarkup()
            for button in buttons:
                keyboard.add(button)
            self.user.increase_search_count()
            return text, keyboard
        else:
            return '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å–∏–∫–æ–≤ –≤ –¥–µ–Ω—å...', None

    def press_on_object_variant(self, data: str):

        if 'object' not in data:
            return self.default_resolver(data)

        object_id = int(data.split('_')[1])

        variant = self.data['search_results'][object_id]
        self.data['choosen_variant'] = variant
        self.set_resolver('press_on_service')
        text = f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É</b>\n'
        for key, value in variant.items():
            text += f'\n<b>{key}</b>: {value}'

        price_list = Service.price_list()
        keyboard = types.InlineKeyboardMarkup()
        for price in price_list:
            button = types.InlineKeyboardButton(text=f'{price["short_name"]} –∑–∞ {price["price"]} {settings.DEFAULT_CURENCY}',
                                                callback_data=f'service_{price["id"]}')
            keyboard.add(button)
        return text, keyboard

    def press_on_service(self, data: str):
        if 'service' not in data:
            return self.default_resolver(data)

        service_id = int(data.split('_')[1])

        self.data['service_id'] = service_id
        self.save()
        curency = Curency.objects.get(name__exact=settings.DEFAULT_CURENCY)
        service = Service.objects.get(pk=service_id)
        money_is_enough = service.check_ammount(self.user, curency)
        purse = self.user.purse_set.get(curency=curency)
        if money_is_enough:
            self.set_resolver('press_confirm_order')
            keyboard = types.InlineKeyboardMarkup()
            button_ok = types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ, –æ—Ñ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='confirm')
            button_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
            keyboard.add(button_ok)
            keyboard.add(button_cancel)
            return f'''–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:
–ê–¥—Ä–µ—Å—Å: {self.data["choosen_variant"]["–ê–¥—Ä–µ—Å"]}
–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {self.data["choosen_variant"]["–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"]}
–£—Å–ª—É–≥–∞: {service.name}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {service.get_price()}
–ù–∞ —Å—á–µ—Ç–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {purse.ammount - service.get_price()}''', keyboard
        else:
            self.data['return_to'] = 'press_on_service'
            self.data['return_data'] = data
            self.save()
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç', callback_data='refill')
            keyboard.add(button)
            return f'–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç–µ: {purse.ammount}, –Ω–µ–±—Ö–æ–¥–∏–º–æ {service.get_price()}. ' \
                   f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è <b>–ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç</b>', keyboard

    def press_confirm_order(self, data: str):
        if data == 'confirm':
            curency = Curency.objects.get(name__exact=settings.DEFAULT_CURENCY)
            service = Service.objects.get(pk=self.data['service_id'])
            try:
                order = Order.create_order(self.user,
                                           service,
                                           curency,
                                           number=self.data["choosen_variant"]["–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"],
                                           address=self.data["choosen_variant"]["–ê–¥—Ä–µ—Å"])
            except (OrderException, BackendException) as m:
                return m, None
            else:
                self.flush()
                return f'–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–∞–∫–∞–∑ ‚Ññ {order.number}', None
        elif data == 'cancel':
            self.flush()
            return '–û—Ç–º–µ–Ω–∏–ª!', None
